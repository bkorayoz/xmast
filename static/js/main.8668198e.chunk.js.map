{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isFinish","setIsFinish","names","setNames","className","map","item","index","onClick","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","JSON","parse","stringify","randomOrderGenerator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNA2CeA,MAxCf,WAAgB,IAAD,EACoBC,oBAAS,GAD7B,mBACLC,EADK,KACKC,EADL,OAEcF,mBACzB,CACE,QACA,QACA,OACA,SACA,OACA,QACA,OACA,WAXS,mBAELG,EAFK,KAEEC,EAFF,KA6Bb,OACE,sBAAKC,UAAU,MAAf,UACGF,EAAMG,KAAI,SAACC,EAAMC,GAAP,OAAe,sCAAOA,EAAP,cAAkBD,SAC1CN,GAAY,wBAAQQ,QAAS,kBAlBN,SAACC,GAG5B,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvBP,EAASc,KAAKC,MAAMD,KAAKE,UAAUV,KAMEW,CAAqBlB,IAA1C,oCACZF,GACF,wBAAQQ,QAAS,kBAAIP,GAAY,IAAjC,kCCzBSoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8668198e.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\n\nfunction App() {\n  const  [isFinish, setIsFinish] = useState(false)\n  const  [names, setNames] = useState(\n    [\n      \"Koray\",\n      \"Rabia\",\n      \"Kaan\",\n      \"Melisa\",\n      \"Idil\",\n      \"Hasan\",\n      \"Ozan\",\n      \"Efekan\"\n    ])\n\n  const randomOrderGenerator = (array) =>{\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n  \n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    setNames(JSON.parse(JSON.stringify(array)))\n  }\n  \n  return (\n    <div className=\"App\">\n      {names.map((item, index)=><p>{`${index} - ${item}`}</p>)}\n      {!isFinish && <button onClick={()=>randomOrderGenerator(names)}>Press to suffle names</button>}\n      {!isFinish &&\n      <button onClick={()=>setIsFinish(true)}>Lock the numbers</button>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}