{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","client","ApolloClient","uri","cache","InMemoryCache","useState","isFinish","setIsFinish","names","setNames","useEffect","updateData","query","gql","then","result","console","log","data","constants","length","value","randomOrderGenerator","array","temporaryValue","randomIndex","newNames","newArray","JSON","parse","stringify","currentIndex","Math","floor","random","mutate","mutation","className","map","item","index","onClick","status","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6rCA4GeA,MAvGf,WACE,IAAMC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,gDACLC,MAAO,IAAIC,kBAHA,EAKoBC,oBAAS,GAL7B,mBAKLC,EALK,KAKKC,EALL,OAMcF,mBAAS,IANvB,mBAMLG,EANK,KAMEC,EANF,KAQbC,qBAAU,WACRC,MACA,IAEF,IA6BMA,EAAa,WACjBX,EACGY,MAAM,CACLA,MAAOC,cAAF,OASNC,MAAK,SAAAC,GAAW,IAAD,MACdC,QAAQC,IAAIF,GACZR,GAAa,UAAAQ,EAAOG,YAAP,mBAAaC,iBAAb,eAAwBC,QAAS,GAA4C,YAAvC,UAAAL,EAAOG,YAAP,eAAaC,UAAU,GAAGE,MAAM,MAAoB,MAE3GrB,EACGY,MAAM,CACLA,MAAOC,cAAF,OASNC,MAAK,SAAAC,GAAW,IAAD,MACdC,QAAQC,IAAIF,GACZN,GAAU,UAAAM,EAAOG,YAAP,mBAAaC,iBAAb,eAAwBC,QAAS,IAAjC,UAAsCL,EAAOG,YAA7C,aAAsC,EAAaC,UAAU,GAAGE,QAAU,QAIpFC,EAAuB,SAACC,GAI5B,IAHA,IACoCC,EAAgBC,EAhElCC,EA+DdC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUP,IACrCQ,EAAeJ,EAASP,OAErB,IAAMW,GAEXN,EAAcO,KAAKC,MAAMD,KAAKE,SAAWH,GAGzCP,EAAiBG,EAFjBI,GAAgB,GAGhBJ,EAASI,GAAgBJ,EAASF,GAClCE,EAASF,GAAeD,EAE1Bf,EAASmB,KAAKC,MAAMD,KAAKE,UAAUH,KA3EjBD,EA4EPC,EA3EX3B,EACCmC,OAAO,CACNC,SAAUvB,cAAF,IAE+De,KAAKE,UAAUJ,MAMvFZ,MAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,OAoE9B,OACE,sBAAKsB,UAAU,MAAf,UACG7B,EAAM8B,KAAI,SAACC,EAAMC,GAAP,OAAe,sCAAOA,EAAM,EAAb,cAAoBD,SAC5CjC,GAAY,wBAAQmC,QAAS,kBAAInB,EAAqBd,IAA1C,oCACZF,GACF,wBAAQmC,QAAS,kBAtEDC,EAsEgB,SArElC1C,EACCmC,OAAO,CACNC,SAAUvB,cAAF,IAEyEe,KAAKE,UAAU,CAACY,OAMlG5B,MAAK,SAAAC,GAAM,OAAIC,QAAQC,IAAIF,WAC5BR,GAAY,GAZK,IAACmC,GAsEhB,kCCzFSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6667dd17.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { gql } from '@apollo/client';\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://wealthy-seal-95.hasura.app/v1/graphql',\n    cache: new InMemoryCache()\n  });\n  const  [isFinish, setIsFinish] = useState(false)\n  const  [names, setNames] = useState([])\n\n  useEffect(()=>{\n    updateData()\n  },[])\n\n  const mutateList = (newNames) =>{\n    client\n    .mutate({\n      mutation: gql`\n        mutation MyMutation {\n          update_constants(where: {key:{_eq: \"xmastNames\"}}, _set: {value: ${JSON.stringify(newNames)}}) {\n            affected_rows\n          }\n        }\n      `\n    })\n    .then(result => console.log(result));\n  }\n\n  const mutateBool = (status) =>{\n    client\n    .mutate({\n      mutation: gql`\n        mutation MyMutation {\n          update_constants(where: {key:{_eq: \"isXmastNumbersLocked\"}}, _set: {value: ${JSON.stringify([status])}}) {\n            affected_rows\n          }\n        }\n      `\n    })\n    .then(result => console.log(result));\n    setIsFinish(true);\n  }\n\n  const updateData = () =>{\n    client\n      .query({\n        query: gql`\n          query MyQuery {\n            constants(where:{_or:[{key:{_eq:\"isXmastNumbersLocked\"}}]}) {\n              key\n              value\n            }\n          }\n        `\n      })\n      .then(result => {\n        console.log(result);\n        setIsFinish((result.data?.constants?.length > 0 && result.data?.constants[0].value[0] === \"locked\") || false);\n      });\n    client\n      .query({\n        query: gql`\n          query MyQuery {\n            constants(where:{_or:[{key:{_eq:\"xmastNames\"}}]}) {\n              key\n              value\n            }\n          }\n        `\n      })\n      .then(result => {\n        console.log(result);\n        setNames((result.data?.constants?.length > 0 && result.data?.constants[0].value) || []);\n      });\n  }\n\n  const randomOrderGenerator = (array) =>{\n    let newArray = JSON.parse(JSON.stringify(array))\n    var currentIndex = newArray.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n  \n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = newArray[currentIndex];\n      newArray[currentIndex] = newArray[randomIndex];\n      newArray[randomIndex] = temporaryValue;\n    }\n    setNames(JSON.parse(JSON.stringify(newArray)))\n    mutateList(newArray)\n  }\n  \n  return (\n    <div className=\"App\">\n      {names.map((item, index)=><p>{`${index+1} - ${item}`}</p>)}\n      {!isFinish && <button onClick={()=>randomOrderGenerator(names)}>Press to suffle names</button>}\n      {!isFinish &&\n      <button onClick={()=>mutateBool(\"locked\")}>Lock the numbers</button>\n      }\n      {/* <button onClick={()=>mutateList([\"koray\", \"rabia\", \"kaan\", \"melisa\", \"idil\", \"hasan\", \"ozan\", \"efekan\"])}>update</button> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}